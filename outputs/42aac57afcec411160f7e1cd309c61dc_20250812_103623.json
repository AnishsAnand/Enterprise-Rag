{
  "text": "Build and test Docker images for Lightsail container services\nWith Docker, you can build, run, test, and deploy distributed applications that are based on containers. Amazon Lightsail container services use Docker container images in deployments to launch containers.\nIn this guide, we show you how to create a container image on your local machine using a Dockerfile. After your image is created, you can then push it to your Lightsail container service to deploy it.\nTo complete the procedures in this guide you should possess a basic understanding of what\nDocker is and how it works. For more information about Docker, see What is Docker?\nContents\nStep 1: Complete the prerequisites\nBefore you get started, you must install the software required to create containers and then push them to your Lightsail container service. For example, you must install and use Docker to create and build your container images that you can then use with your Lightsail container service. For more information, see Installing software to manage container images for your Amazon Lightsail container services.\nStep 2: Create a Dockerfile and build a container image\nComplete the following procedure to create a Dockerfile, and build a\nmystaticwebsite Docker container image from it. The container image will be for\na simple static website hosted on an Apache web server on Ubuntu.\n-\nCreate a\nmystaticwebsitefolder on your local machine where you will store your Dockerfile.\n-\nCreate a Dockerfile in the folder you just created.\nThe Dockerfile does not use a file extension, such as\n.TXT. The full file name is\nDockerfile.\n-\nCopy one of the following code blocks depending on how you want to configure your container image, and paste it into your Dockerfile:\n-\nIf you want to create a simple static website container image with a Hello World message, then copy the following code block and paste it into your Dockerfile. This code sample uses the Ubuntu 18.04 image. The\nRUNinstructions updates the package caches, and installs and configures Apache, and prints a Hello World message to the web server's document root. The\nEXPOSEinstruction exposes port 80 on the container, and the\nCMDinstruction starts the web server.\nFROM ubuntu:18.04 # Install dependencies RUN apt-get update && \\ apt-get -y install apache2 # Write hello world message RUN echo 'Hello World!' > /var/www/html/index.html # Open port 80 EXPOSE 80 # Start Apache service CMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]\n-\nIf you want to use your own set of HTML files for your static website container image, create an\nhtmlfolder in the same folder where you store your Dockerfile. Then put your HTML files in that folder.\nAfter your HTML files are in the\nhtmlfolder, copy the following code block and paste into to your Dockerfile. This code sample uses the Ubuntu 18.04 image. The\nRUNinstructions updates the package caches, and installs and configures Apache. The\nCOPYinstruction copies the contents of the html folder to the web server's document root. The\nEXPOSEinstruction exposes port 80 on the container, and the\nCMDinstruction starts the web server.\nFROM ubuntu:18.04 # Install dependencies RUN apt-get update && \\ apt-get -y install apache2 # Copy html directory files COPY html /var/www/html/ # Open port 80 EXPOSE 80 CMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]\n-\n-\nOpen a command prompt or terminal window and change the directory to the folder in which you are storing your Dockerfile.\n-\nEnter the following command to build your container image using the Dockerfile in the folder. This command builds a new Docker container image named\nmystaticwebsite.\ndocker build -t mystaticwebsite .\nYou should see a message that confirms your image was successfully built.\n-\nEnter the following command to view the container images on your local machine.\ndocker images --filter reference=mystaticwebsite\nYou should see a result similar to the following example, showing the new container image created.\nYour newly built container image is ready to be tested by using it to run a new container on your local machine. Continue to the next Step 3: Run your new container image section of this guide.\nStep 3: Run your new container image\nComplete the following steps to run the new container image you created.\n-\nIn a command prompt or terminal window, enter the following command to run the container image that you built in the previous Step 2: Create a Dockerfile and build a container image section of this guide. The\n-p 8080:80option maps the exposed port 80 on the container to port 8080 on your local machine. The\n-doption specifies that the container should run in detached mode.\ndocker container run -d -p 8080:80 --name mystaticwebsite mystaticwebsite:latest\n-\nEnter the following command to view your running containers.\ndocker container ls -a\nYou should see a result similar to the following example, showing the new running container.\n-\nTo confirm that the container is up and running, open a new browser window and browse to\nhttp://localhost:8080. You should see a message similar to the following example. This confirms that your container is up and running on your local machine.\nYour newly built container image is ready to be pushed to your Lightsail account so that you can deploy it to your Lightsail container service. For more information, see Pushing and managing container images on your Amazon Lightsail container services.\n(Optional) Step 4: Clean up the containers running on your local machine\nNow that you've created a container image that you can push to your Lightsail container service, it's time to clean up the containers that are running on your local machine as a result of following the procedures in this guide.\nComplete the following steps to clean up the containers running on your local machine:\n-\nRun the following command to view the containers that are running on your local machine.\ndocker container ls -a\nYou should see a result similar to the following, which lists the names of the containers running on your local machine.\n-\nRun the following command to remove the running container that you created earlier in this guide. This forces the container to be stopped, and permanently deletes it.\ndocker container rm <ContainerName> --force\nIn the command, replace <ContainerName> with the name of the container you want to stop, and delete.\nExample:\ndocker container rm\nmystaticwebsite--force\nThe container that was created as a result of this guide should now be deleted.\nNext steps after creating container images\nAfter you create your container images, push them to your Lightsail container service when you're ready to deploy them. For more information, see Manage Lightsail container service images.",
  "title": "Build and test Docker images for Lightsail container services",
  "author": "",
  "date": ""
}