{
  "text": "Getting started with App Runner\nAWS App Runner is an AWS service that provides a fast, simple, and cost-effective way to turn an existing container image or source code directly into a running web service in the AWS Cloud.\nThis tutorial covers how you can use AWS App Runner to deploy your application to an App Runner service. It walks through configuring the source code and deployment, the service build, and the service runtime. It also shows how to deploy a code version, make a configuration change, and view logs. Last, the tutorial shows how to clean up the resources that you created while following the tutorial's procedures.\nTopics\nPrerequisites\nBefore you start the tutorial, be sure to take the following actions:\n-\nComplete the setup steps in Setting up for App Runner.\n-\nDecide if you'd like to work with either a GitHub repository or a Bitbucket repository.\n-\nTo work with a Bitbucket, first create a Bitbucket\naccount, if you don't already have one. If you're new to Bitbucket, see Getting started with Bitbucket in the Bitbucket Cloud Documentation.\n-\nTo work with GitHub, create a GitHub\naccount, if you don't already have one. If you're new to GitHub, see Getting started with GitHub in the GitHub Docs.\nNote\nYou can create connections to multiple repository providers from your account. So if you'd like to walk through deploying from both a GitHub and a Bitbucket repository, you can repeat this procedure. The next time through create a new App Runner service and create a new account connection for the other repository provider.\n-\n-\nCreate a repository in your repository provider account. This tutorial uses the repository name\npython-hello. Create files in the root directory of the repository, with the names and content specified in the following examples.\nExample requirements.txt\npyramid==2.0\nExample server.py\nfrom wsgiref.simple_server import make_server from pyramid.config import Configurator from pyramid.response import Response import os def hello_world(request): name = os.environ.get('NAME') if name == None or len(name) == 0: name = \"world\" message = \"Hello, \" + name + \"!\\n\" return Response(message) if __name__ == '__main__': port = int(os.environ.get(\"PORT\")) with Configurator() as config: config.add_route('hello', '/') config.add_view(hello_world, route_name='hello') app = config.make_wsgi_app() server = make_server('0.0.0.0', port, app) server.serve_forever()\nStep 1: Create an App Runner service\nIn this step, you create an App Runner service based on the example source code repository that you created on GitHub or Bitbucket as part of Prerequisites. The example contains a simple Python website. These are the main steps you take to create a service:\n-\nConfigure your source code.\n-\nConfigure source deployment.\n-\nConfigure application build.\n-\nConfigure your service.\n-\nReview and confirm.\nThe following diagram outlines the steps for creating an App Runner service:\nTo create an App Runner service based on a source code repository\n-\nConfigure your source code.\n-\nOpen the App Runner console\n, and in the Regions list, select your AWS Region.\n-\nIf the AWS account doesn't have any App Runner services yet, the console home page is displayed. Choose Create an App Runner service.\nIf the AWS account has existing services, the Services page with a list of your services is displayed. Choose Create service.\n-\nOn the Source and deployment page, in the Source section, for Repository type, choose Source code repository.\n-\nSelect a Provider Type. Choose either GitHub or Bitbucket.\n-\nNext choose Add new. If prompted, provide your GitHub or Bitbucket credentials.\n-\nChoose the next set of steps based on the Provider type you previously selected.\nNote\nThe following steps to install the AWS connector for GitHub to your GitHub account are one-time steps. You can reuse the connection for creating multiple App Runner services based on repositories in this account. When you have an existing connection, choose it and skip to repository selection.\nThe same applies to the AWS connector for your Bitbucket account. If you're using both GitHub and Bitbucket as source code repositories for your App Runner services, you'll need to install one AWS Connector for each provider. You can then reuse each connector for creating more App Runner services.\n-\nFor GitHub, follow these steps.\n-\nOn the next screen, enter a Connection Name.\n-\nIf this your first time using GitHub with App Runner, select Install another.\n-\nIn the AWS Connector for GitHub dialog box, if prompted, choose your GitHub account name.\n-\nIf prompted to authorize the AWS Connector for GitHub, choose Authorize AWS Connections.\n-\nIn the Install AWS Connector for GitHub dialog box,Choose Install.\nYour account name appears as the selected GitHub account/organization. You can now choose a repository in your account.\n-\nFor Repository, choose the example repository you created,\npython-hello. For Branch, choose the default branch name of your repository (for example, main).\n-\nLeave Source directory with the default value. The directory defaults to the repository root. You stored your source code in the repository root directory in the previous Prerequisites steps.\n-\n-\nFor Bitbucket, follow these steps.\n-\nOn the next screen, enter a Connection Name.\n-\nIf this your first time using Bitbucket with App Runner, select Install another.\n-\nIn the AWS CodeStar requests access dialog box, you can select your workspace and grant access to AWS CodeStar for Bitbucket integration. Select your workspace, then select Grant access.\n-\nNext you'll be redirected to the AWS console. Verify that the Bitbucket application is set to the correct Bitbucket workspace and select Next.\n-\nFor Repository, choose the example repository you created,\npython-hello. For Branch, choose the default branch name of your repository (for example, main).\n-\nLeave Source directory with the default value. The directory defaults to the repository root. You stored your source code in the repository root directory in the previous Prerequisites steps.\n-\n-\n-\n-\nConfigure your deployments: In the Deployment settings section, choose Automatic, and then choose Next.\nNote\nWith automatic deployment, each new commit to your repository source directory automatically deploys a new version of your service.\n-\nConfigure application build.\n-\nOn the Configure build page, for Configuration file, choose Configure all settings here.\n-\nProvide the following build settings:\n-\nRuntime – Choose Python 3.\n-\nBuild command – Enter\npip install -r requirements.txt.\n-\nStart command – Enter\npython server.py.\n-\nPort – Enter\n8080.\n-\n-\nChoose Next.\nNote\nThe Python 3 runtime builds a Docker image using a base Python 3 image and your example Python code. It then launches a service that runs a container instance of this image.\n-\n-\nConfigure your service.\n-\nOn the Configure service page, in the Service settings section, enter a service name.\n-\nUnder Environment variables, select Add environment variable. Provide the following values for the environment variable.\n-\nSource – Choose Plain text\n-\nEnvironment variable name –\nNAME\n-\nEnvironment variable value – any name (for example, your first name).\nNote\nThe example application reads the name you set in this environment variable and displays the name on its webpage.\n-\n-\nChoose Next.\n-\n-\nOn the Review and create page, verify all the details you've entered, and then choose Create and deploy.\nIf the service is successfully created, the console shows the service dashboard, with a Service overview of the new service.\n-\nVerify that your service is running.\n-\nOn the service dashboard page, wait until the service Status is Running.\n-\nChoose the Default domain value—it's the URL to the website of your service.\nNote\nTo augment the security of your App Runner applications, the *.awsapprunner.com domain is registered in the Public Suffix List (PSL)\n. For further security, we recommend that you use cookies with a\n__Host-prefix if you ever need to set sensitive cookies in the default domain name for your App Runner applications. This practice will help to defend your domain against cross-site request forgery attempts (CSRF). For more information see the Set-Cookie\npage in the Mozilla Developer Network.\nA webpage displays: Hello,\nyour name!\n-\nStep 2: Change your service code\nIn this step, you make a change to your code in the repository source directory. The App Runner CI/CD capability automatically builds and deploys the change to your service.\nTo make a change to your service code\n-\nNavigate to your example repository.\n-\nEdit the file named\nserver.py.\n-\nIn the expression assigned to the variable\nmessage, change the text\nHelloto\nGood morning.\n-\nSave and commit your changes to the repository.\n-\nThe following steps illustrate changing the service code in a GitHub repository.\n-\nNavigate to your example GitHub repository.\n-\nChoose the file name\nserver.pyto navigate to that file.\n-\nChoose Edit this file (the pencil icon).\n-\nIn the expression assigned to the variable\nmessage, change the text\nHelloto\nGood morning.\n-\nChoose Commit changes.\n-\n-\nThe new commit starts to deploy for your App Runner service. On the service dashboard page, the service Status changes to Operation in progress.\nWait for the deployment to end. On the service dashboard page, the service Status should change back to Running.\n-\nVerify that the deployment is successful: refresh the browser tab where the webpage of your service is displayed.\nThe page now displays the modified message: Good morning,\nyour name!\nStep 3: Make a configuration change\nIn this step, you make a change to the\nNAME environment variable value, to demonstrate a service configuration change.\nTo change an environment variable value\n-\nOpen the App Runner console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Services, and then choose your App Runner service.\nThe console displays the service dashboard with a Service overview.\n-\nOn the service dashboard page, choose the Configuration tab.\nThe console displays your service configuration settings in several sections.\n-\nIn the Configure service section, choose Edit.\n-\nFor the environment variable with the key\nNAME, change the value to a different name.\n-\nChoose Apply changes.\nApp Runner starts the update process. On the service dashboard page, the service Status changes to Operation in progress.\n-\nWait for the update to end. On the service dashboard page, the service Status should change back to Running.\n-\nVerify that the update is successful: refresh the browser tab where the webpage of your service is displayed.\nThe page now displays the modified name: Good morning,\nnew name!\nStep 4: View logs for your service\nIn this step, you use the App Runner console to view logs for your App Runner service. App Runner streams logs to Amazon CloudWatch Logs (CloudWatch Logs) and displays them on your service's dashboard. For information about App Runner logs, see Viewing App Runner logs streamed to CloudWatch Logs.\nTo view logs for your service\n-\nOpen the App Runner console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Services, and then choose your App Runner service.\nThe console displays the service dashboard with a Service overview.\n-\nOn the service dashboard page, choose the Logs tab.\nThe console displays a few types of logs in several sections:\n-\nEvent log – Activity in the lifecycle of your App Runner service. The console displays the latest events.\n-\nDeployment logs – Source repository deployments to your App Runner service. The console displays a separate log stream for each deployment.\n-\nApplication logs – The output of the web application that's deployed to your App Runner service. The console combines the output from all running instances into a single log stream.\n-\n-\nTo find specific deployments, scope down the deployment log list by entering a search term. You can search for any value that appears in the table.\n-\nTo view a log's content, choose View full log (event log) or the log stream name (deployment and application logs).\n-\nChoose Download to download a log. For a deployment log stream, select a log stream first.\n-\nChoose View in CloudWatch to open the CloudWatch console and use its full capabilities to explore your App Runner service logs. For a deployment log stream, select a log stream first.\nNote\nThe CloudWatch console is particularly useful if you want to view application logs of specific instances instead of the combined application log.\nStep 5: Clean up\nYou've now learned how to create an App Runner service, view logs, and make some changes. In this step, you delete the service to remove resources that you don't need anymore.\nTo delete your service\n-\nOn the service dashboard page, choose Actions, and then choose Delete service.\n-\nIn the confirmation dialog, enter the requested text, and then choose Delete.\nResult: The console navigates to the Services page. The service that you just deleted shows a status of DELETING. A short time later it disappears from the list.\nConsider also deleting the GitHub and Bitbucket connections that you created as part of this tutorial. For more information, see Managing App Runner connections.\nWhat's next\nNow that you've deployed your first App Runner service, learn more in the following topics:\n-\nApp Runner architecture and concepts – The architecture, main concepts, and AWS resources related to App Runner.\n-\nImage-based service and Code-based service – The two types of application source that App Runner can deploy.\n-\nDeveloping application code for App Runner – Things you should know when developing or migrating application code for deployment to App Runner.\n-\nUsing the App Runner console – Manage and monitor your service using the App Runner console.\n-\nManaging your App Runner service – Manage the lifecycle of your App Runner service.\n-\nObservability for your App Runner service – Get visibility into your App Runner service operations by monitoring metrics, reading logs, handling events, tracking service action calls, and tracing application events like HTTP calls.\n-\nApp Runner configuration file – A configuration-based way to specify options for the build and runtime behavior of your App Runner service.\n-\nThe App Runner API – Use the App Runner application programming interface (API) to create, read, update, and delete App Runner resources.\n-\nSecurity in App Runner – The different ways that AWS and you ensure cloud security while you use App Runner and other services.",
  "title": "Getting started with App Runner",
  "author": "",
  "date": ""
}