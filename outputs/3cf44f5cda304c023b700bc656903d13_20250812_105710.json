{
  "title": "Learn how to get started with Elastic Beanstalk",
  "author": null,
  "date": null,
  "text": "Learn how to get started with Elastic Beanstalk\nWith Elastic Beanstalk you can deploy, monitor, and scale web applications and services. Typically, you will develop your code locally then deploy it to Amazon EC2 server instances. Theses instances, also called environments, run on platforms that can be upgraded through the AWS console or the command line.\nTo get started, we recommend deploying a pre-built sample application directly from the console. Then, you can learn how to develop locally and deploy from the command line in the QuickStart: Deploy a PHP application to Elastic Beanstalk.\nThere is no cost for using Elastic Beanstalk, but standard fees do apply to AWS resources that you\ncreate during the course of this tutorial until you delete them at the end. The total charges\nare typically less than a dollar. For information about how to\nminimize charges, see AWS free tier\nAfter completing this tutorial, you will understand the basics of creating, configuring, deploying, updating, and monitoring an Elastic Beanstalk application with environments running on Amazon EC2 instances.\nEstimated duration: 35-45 minutes\nWhat you will build\nYour first Elastic Beanstalk application will consist of a single Amazon EC2 environment running the PHP sample on a PHP managed platform.\n- Elastic Beanstalk application\n-\nAn Elastic Beanstalk application is a container for Elastic Beanstalk components, including environments where your application code runs on platforms provided and managed by Elastic Beanstalk, or in custom containers that you provide.\n- Environment\n-\nAn Elastic Beanstalk environment is a collection of AWS resources running together including an Amazon EC2 instance. When you create an environment, Elastic Beanstalk provisions the necessary resources into your AWS account.\n- Platform\n-\nA platform is a combination of an operating system, programming language runtime, web server, application server, and additional Elastic Beanstalk components. Elastic Beanstalk provides manged platforms, or you can provide your own platform in a container.\nElastic Beanstalk supports platforms for different programming languages, application servers, and Docker containers. When you create an environment, you must choose the platform. You can upgrade the platform, but you cannot change the platform for an environment.\nSwitching platforms\nIf you need to change programming languages, you must create and switch to a new environment on a different platform.\nStep 1 - Create an application\nTo create your example application, you'll use the Create application console wizard. It creates an Elastic Beanstalk application and launches an environment within it.\nReminder: an environment is a collection of AWS resources required to run your application code.\nTo create an application\n-\nOpen the Elastic Beanstalk console\n.\n-\nChoose Create application.\n-\nFor Application name enter\ngetting-started-app.\nThe console provides a six step process for creating an application and configuring an environment. For this quick start, you'll only need to focus on the first two steps, then you can skip ahead to review and create your application and environment.\nTo configure an environment\n-\nIn Environment information, for Environment name enter:\ngs-app-web-env.\n-\nFor Platform, choose the PHP platform.\n-\nFor Application code and Presets, accept the defaults (Sample application and Single instance), then choose Next.\nTo configure service access\nNext, you need two roles. A service role allows Elastic Beanstalk to monitor your EC2 instances and upgrade you environment’s platform. An EC2 instance profile role permits tasks such as writing logs and interacting with other services.\nTo create the Service role\n-\nFor Service role, choose Create role.\n-\nFor Trusted entity type, choose AWS service.\n-\nFor Use case, choose Elastic Beanstalk – Environment.\n-\nChoose Next.\n-\nVerify that Permissions policies include the following, then choose Next:\n-\nAWSElasticBeanstalkEnhancedHealth\n-\nAWSElasticBeanstalkManagedUpdatesCustomerRolePolicy\n-\n-\nChoose Create role.\n-\nReturn to the Configure service access tab, refresh the list, then select the newly created service role.\nTo create the EC2 instance profile\n-\nChoose Create role.\n-\nFor Trusted entity type, choose AWS service.\n-\nFor Use case, choose Elastic Beanstalk – Compute.\n-\nChoose Next.\n-\nVerify that Permissions policies include the following, then choose Next:\nAWSElasticBeanstalkWebTier\nAWSElasticBeanstalkWorkerTier\nAWSElasticBeanstalkMulticontainerDocker\nChoose Create role.\n-\nReturn to the Configure service access tab, refresh the list, then select the newly created EC2 instance profile.\nTo finish configuring and creating your application\n-\nSkip over EC2 key pair.\nWe'll show you other ways to connect to your Amazon EC2 instances through the Console.\n-\nChoose Skip to Review to move over several optional steps.\nOptional steps: networking, databases, scaling parameters, advanced configuration for updates, monitoring, and logging.\n-\nOn the Review page which shows a summary of your choices, choose Submit.\nCongratulations!\nYou have created an application and configured an environment! Now you need to wait for the resources to deploy.\nStep 2 - Deploy your application\nWhen you create an application, Elastic Beanstalk sets up the environments for you. You just need to sit back and wait.\nThe initial deploy can take up to five minutes to create the resources. Updates will take less time because only changes will be deployed to your stack.\nWhen you create the example application, Elastic Beanstalk creates the following resources:\n-\nEC2 instance – An Amazon EC2 virtual machine configured to run web apps on the platform you selected.\nEvery platform runs a different set of software, configuration files, and scripts to support a specific language version, framework, web container, or combination thereof. Most platforms use either Apache or nginx as a reverse proxy to forward web traffic to your web app, serve static assets, and generate access and error logs. You can connect to your Amazon EC2 instances to view configuration and logs.\n-\nInstance security group – An Amazon EC2 security group will be created to allow incoming requests on port 80, so inbound traffic on a load balancer can reach your web app.\n-\nAmazon S3 bucket – A storage location for your source code, logs, and other artifacts.\n-\nAmazon CloudWatch alarms – Two CloudWatch alarms are created to monitor the load on your instances and scale them up or down as needed.\n-\nAWS CloudFormation stack – Elastic Beanstalk uses AWS CloudFormation to deploy the resources in your environment and make configuration changes. You can view the resource definition template in the AWS CloudFormation console\n.\n-\nDomain name – A domain name that routes to your web app in the form :\n.\nsubdomain.\nregion.elasticbeanstalk.com\nElastic Beanstalk creates your application, launches an environment, makes an application version, then deploys your code into the environment. During the process, the console tracks progress and displays event status in the Events tab.\nAfter all of the resources are deployed, the environment's health should change to\nOk.\nYour application is ready!\nAfter you see your application health change to\nOk, you can\nbrowse to your web application's website.\nStep 3 - Explore the Elastic Beanstalk environment\nYou'll start exploring your deployed application environment from the Environment overview page in the console.\nTo view the environment and your application\nOpen the Elastic Beanstalk console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Environments, and then choose the name of your environment from the list.\n-\nChoose Go to environment to browse your application!\n(You can also choose the URL link listed for Domain to browse your application.)\nThe connection will be HTTP (not HTTPS), so you might see a warning in your browser.\nBack in the Elastic Beanstalk console, the upper portion shows the Environment overview with top level information about your environment, including name, domain URL, current health status, running version, and the platform that the application is running on. The running version and platform are essential for troubleshooting your currently deployed application.\nAfter the overview pane, you will see recent environment activity in the Events tab.\nWhile Elastic Beanstalk creates your AWS resources and launches your application, the environment is\nin a\nPending state. Status messages about launch events are continuously added to\nthe list of Events .\nThe environment's Domain is the URL for your deployed web application. In the left navigation pane, Go to environment also takes you to your domain. Similarly, the left navigation pane has links that correspond to the various tabs.\nTake note of the Configuration link in the left navigation pane. which displays a summary of environment configuration option values, grouped by category.\nEnvironment configuration settings\nTake note of the Configuration link in the left navigation pane. You can view and edit detailed environment settings, such as service roles, networking, database, scaling, managed platform updates, memory, health monitoring, rolling deployment, logging, and more!\nThe various tabs contain detailed information about your environment:\n-\nEvents – View an updating list of information and error messages from the Elastic Beanstalk service and other services for resources in your environment.\n-\nHealth – View status and detailed health information for the Amazon EC2 instances running your application.\n-\nLogs – Retrieve and download logs from the Amazon EC2 in your environment. You can retrieve full logs or recent activity. The retrieved logs are available for 15 minutes.\n-\nMonitoring – View statistics for the environment, such as average latency and CPU utilization.\n-\nAlarms – View and edit alarms that are configured for environment metrics.\n-\nManaged updates – View information about upcoming and completed managed platform updates and instance replacement.\n-\nTags – View and edit key-value pairs that are applied to your environment.\nNote\nLinks in the console navigation pane will display the corresponding tab.\nTroubleshooting with logs\nFor troubleshooting unexpected behaviors or debugging deployments, you might want to check the logs in your environments.\nYou can request 100 lines of all the log files under the Logs tab in the Elastic Beanstalk console. Alternatively, you can connect directly to the Amazon EC2 instance and tail the logs in realtime.\nTo request the logs (Elastic Beanstalk console)\n-\nNavigate to your environment in the Elastic Beanstalk console.\n-\nChoose the Logs tab or left-nav, then choose Request logs.\n-\nSelect Last 100 lines.\n-\nAfter the logs are created, choose the Download link to view the logs in the browser.\nIn the logs, find the log and note the directory for the nginx access log.\nAdd a policy to enable connections to Amazon EC2\nBefore you can connect, you must add a policy that enables connections to Amazon EC2 with Session Manager.\n-\nNavigate to the IAM console.\n-\nFind and select the\naws-elasticbeanstalk-ec2-rolerole.\n-\nChoose Add permission, then Attach policies.\n-\nSearch for a default policy that begins with the following text:\nAmazonSSMManagedEC2Instance, then add it to the role.\nTo connect to your Amazon EC2 with Session Manager\n-\nNavigate to the Amazon EC2 console.\n-\nChoose Instances, then select your\ngs-app-web-envinstance.\n-\nChoose Connect, then Session Manager.\n-\nChoose Connect.\nAfter connecting to the instance, start a bash shell and tail the logs:\n-\nRun the command\nbash.\n-\nRun the command\ncd /var/log/nginx.\n-\nRun the command\ntail -f access.log.\n-\nIn your browser, go to the application domain URL. Refresh.\nCongratulations, you're connected!\nYou should see log entries in your instance update every time you refresh the page.\nConnect button not working?\nIf the connect button is not available, go back to IAM and verify that you added the necessary policy to the role.\nStep 4 - Update your application\nEventually, you will want to update your application. You can deploy a new version at any time, as long as no other update operations are in progress on your environment.\nThe application version that you started this tutorial with is called Sample Application.\nTo update your application version\n-\nDownload the following PHP sample application:\nPHP – php-v2.zip\nOpen the Elastic Beanstalk console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Environments, and then choose the name of your environment from the list.\n-\nOn the environment overview page, choose Upload and deploy.\n-\nSelect Choose file, and then upload the sample application source bundle that you downloaded.\nThe console automatically fills in the Version label with a new unique label, automatically incrementing a trailing integer. If you choose your own version label, ensure that it's unique.\n-\nChoose Deploy.\nWhile Elastic Beanstalk deploys your file to your Amazon EC2 instances, you can view the deployment status on the Environment overview page. While the application version is updated, the environment Health status is gray. When the deployment is complete, Elastic Beanstalk performs an application health check. When the application responds to the health check, it's considered healthy and the status returns to green. The environment overview shows the new Running Version—the name you provided as the Version label.\nElastic Beanstalk also uploads your new application version and adds it to the table of application versions. To view the table, choose Application versions under getting-started-app on the navigation pane.\nUpdate success!\nYou should see an updated \"v2\" message after refreshing your browser.\nIf you want to edit the source yourself, unzip, edit, then re-zip the source bundle. On macOS, use the following command from inside your php directory with the -X to exclude extra file attributes:\nzip -X -r ../php-v2.zip .\nStep 5 - Scale your application\nYou can configure your environment to better suit your application. For example, if you have a compute-intensive application, you can change the type of Amazon Elastic Compute Cloud (Amazon EC2) instance that is running your application. To apply configuration changes, Elastic Beanstalk performs an environment update.\nSome configuration changes are simple and happen quickly. Some changes require deleting and recreating AWS resources, which can take several minutes. When you change configuration settings, Elastic Beanstalk warns you about potential application downtime.\nIncrease capacity settings\nIn this example of a configuration change, you edit your environment's capacity settings. You configure a load-balanced, scalable environment that has between two and four Amazon EC2 instances in its Auto Scaling group, and then you verify that the change occurred. Elastic Beanstalk creates an additional Amazon EC2 instance, adding to the single instance that it created initially. Then, Elastic Beanstalk associates both instances with the environment's load balancer. As a result, your application's responsiveness is improved and its availability is increased.\nTo change your environment's capacity\nOpen the Elastic Beanstalk console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Environments, and then choose the name of your environment from the list.\nIn the navigation pane, choose Configuration.\n-\nIn the Instance traffic and scaling configuration category, choose Edit.\n-\nCollapse the Instances section, so you can more easily see the Capacity section. Under Auto Scaling group change Environment type to Load balanced.\n-\nIn the Instances row, change Min to\n2and Max to\n4.\n-\nTo save the changes choose Apply at the bottom of the page.\nIf you are warned that the update will replace all of your current instances. Choose Confirm.\nThe environment update can take a few minutes. You should see several updates in the list of events. Watch for the event Successfully deployed new configuration to environment.\nVerify increased capacity\nAfter the environment update is complete and the environment is ready, Elastic Beanstalk automatically launched a second instance to meet your new minimum capacity setting.\nTo verify the increased capacity\n-\nChoose Health from either the tab list or left navigation pane.\n-\nReview the Enhanced instance health section.\nYou just scaled up!\nWith two Amazon EC2 instances, your environment capacity has doubled, and it only took a few minutes.\nCleaning up your Elastic Beanstalk environment\nTo ensure that you're not charged for any services you aren't using, delete all application versions and terminate environments, which also deletes the AWS resources that the environment created for you.\nTo delete the application and all associated resources\n-\nDelete all application versions.\nOpen the Elastic Beanstalk console\n, and in the Regions list, select your AWS Region.\n-\nIn the navigation pane, choose Applications, and then choose getting-started-app.\nIn the navigation pane, find your application's name and choose Application versions.\n-\nOn the Application versions page, select all application versions that you want to delete.\n-\nChoose Actions, and then choose Delete.\n-\nTurn on Delete versions from Amazon S3.\n-\nChoose Delete, and then choose Done.\n-\nTerminate the environment.\n-\nIn the navigation pane, choose getting-started-app, and then choose GettingStartedApp-env in the environment list.\n-\nChoose Actions, and then choose Terminate Environment.\n-\nConfirm that you want to terminate GettingStartedApp-env by typing the environment name, and then choose Terminate.\n-\n-\nDelete the getting-started-app application.\n-\nIn the navigation pane, choose the getting-started-app.\n-\nChoose Actions, and then choose Delete application.\n-\nConfirm that you want to delete getting-started-app by typing the application name, and then choose Delete.\n-\nCongratulations!\nYou have successfully deployed a sample application to the AWS Cloud, uploaded a new version, modified its configuration to add a second Auto Scaling instance, and cleaned up your AWS resources!\nNext steps\nTo learn how to use the\neb command line tool to automate deploying\nyour code to Elastic Beanstalk, We suggest continuing with the QuickStart: Deploy a PHP application to\nElastic Beanstalk.\nNext, you might want to review how to set up HTTPS connection, see Configuring HTTPS for your Elastic Beanstalk environment."
}