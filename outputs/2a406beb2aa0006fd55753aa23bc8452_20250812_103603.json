{
  "text": "Choosing an AWS container service\nTaking the first step\n|\nPurpose\n|\nDetermine which AWS container service is the best fit for your organization.\n|\nLast updated\n|\nMay 16, 2025\n|\nCovered services\nIntroduction\nContainers are a key component of modern application development. They are the standard for organizing compute resources, and managing the content of your application deployments.\nContainers provide a discrete reproducible compute environment for building software to deploy in the cloud. They also simplify packaging and dependency management. You can use them for everything from orchestrating web applications or very large multi-cluster estates to testing your work and doing a proof of concept on your laptop.\nThis decision guide helps you get started and choose the right AWS container service for your modern application development.\nUnderstand\nContainers offer a number of advantages for packaging, deploying, and running applications:\n-\nPortability: Benefit from a consistent runtime environment that can run on any platform that supports the container runtime.\n-\nScalability: Scale applications up or down, based on demand, with lightweight and easily replicated containers.\n-\nConsistency: Ensure that the application runs the same way in all environments with a consistent runtime environment.\n-\nEfficiency: Use fewer resources than traditional virtual machines with lightweight containers.\n-\nIsolation: Improve security and reliability with containers' process-level isolation, with which applications running in separate containers cannot interfere with each other, improving security and reliability.\n-\nAgility: Reduce the time that it takes to bring new features or applications to market by quickly packaging and deploying applications.\nYou can think about the universe of AWS container services in three distinct layers:\n-\nThe Compute capacity layer is where your containers actually run. This layer consists of:\n-\nAmazon Elastic Compute Cloud (Amazon EC2) instances: These instances provide the underlying compute capacity for running containers. You can choose from a wide range of instance types and sizes to match your application requirements. EC2 instances can be used as the compute layer for both Amazon ECS and Amazon EKS.\n-\nAWS Fargate: Fargate is a serverless compute engine for containers with which you can run containers without managing the underlying infrastructure. It removes the need to provision and manage EC2 instances. You can use Fargate with both Amazon ECS and Amazon EKS.\n-\nAWS Outposts: AWS Outposts is a fully managed service that extends AWS infrastructure and services to your on-premises or hybrid environment. With AWS Outposts, you can run containers on AWS infrastructure deployed in your own data center.\n-\n-\nThe orchestration layer schedules and scales your environment. This layer includes:\n-\nAmazon Elastic Container Service (Amazon ECS): Amazon ECS is a fully managed container orchestration service that simplifies the deployment, management, and scaling of containerized applications. You can use Amazon ECS to define tasks and services, handle service discovery, and manage the lifecycle of containers.\n-\nAmazon Elastic Kubernetes Service (Amazon EKS): Amazon EKS is a managed Kubernetes service with which you can deploy, manage, and scale containerized applications using Kubernetes. It provides a highly available and secure Kubernetes control plane.\n-\nRed Hat OpenShift Service on AWS (ROSA): ROSA is a fully managed service with which you can deploy and run Red Hat OpenShift clusters on AWS infrastructure. OpenShift is a popular enterprise-grade Kubernetes platform that extends the capabilities of Kubernetes with additional features and tools for building, deploying, and managing containerized applications.\n-\n-\nThe Vertical solutions layer is a set of vertical integration services that provide higher-level and bundled services that simplify the process of deploying and managing applications. The AWS services in this layer are:\n-\nAWS App Runner: AWS App Runner is a fully managed service designed to simplify the deployment and use of containerized web applications and APIs. You provide your container image, and App Runner automatically builds, deploys, and scales your application. It handles the provisioning of the underlying compute resources, load balancing, and automatic scaling based on incoming traffic.\n-\nAmazon Lightsail: Amazon Lightsail is a cloud platform that offers pre-configured virtual private servers (instances) and other resources for running applications. It provides pre-defined configurations for quickly provisioning compute instances, databases, storage, and networking resources. Lightsail supports running containerized applications by provisioning instances with Docker pre-installed, aimed at easing the deployment and management of your containers.\n-\nAWS Batch: AWS Batch is a fully managed service with which you can run batch computing workloads on AWS. It dynamically provisions the optimal compute resources based on the volume and specific resource requirements of the batch jobs that you submit. It automatically handles job scheduling, resource provisioning, and scaling based on the workload requirements.\n-\nAmazon Elastic Container Registry (Amazon ECR): Amazon ECR is a fully managed container registry with which you can store, manage, and deploy container images. It is designed to provide secure and scalable storage for your container images and simplify provisioning containers with the desired images.\n-\nNote\nAWS provides a variety of ways to deploy and run containers. One of the first considerations is your preference for either a serverless operational model or a Kubernetes operation model. In practice, most customers use both to varying degrees.\nThe choice of operating model is explored in-depth in the Choosing a\nmodern application strategy decision guide\nConsider\nIt's important to choose a container service that aligns to your application requirements and operational preferences. The following section outlines some of the key criteria to consider when choosing a container service, as well as supporting tools and services.\n- Managed service and operation overhead\n-\nOrganizations might choose to build on managed container services to reduce their operational overhead. This approach allows developers and operators to focus on their unique activities that add value, instead of on undiﬀerentiated tasks.\n- Workload characteristics\n-\nUnderstanding your workload patterns can help you make architecture choices. Workload patterns can include web applications, API-based microservices, event-driven applications, streaming and messaging, data pipelines, IT automations, and more. Some workloads perform better or are more cost effective in one compute environment versus another type.\n- Application portability\n-\nMany customers want to ensure that their applications can run in—and be migrated or moved to—a different environment. It's important for them to be able to preserve choice, or run an application both on premises and in the cloud.\nWe recommend building competency in software architectures and build packaging with which you can readily port differentiating business logic between compute services.\nApplications built using some technologies might run more effectively on some compute services rather than others.\n- Organization size and skills\n-\nThe skills of your organization are a major factor when deciding which container services you use. The approach you take can require some investment in DevOps and Site Reliability Engineer (SRE) teams. Building out an automated pipeline to deploy applications is common for most modern application development.\nSome choices elevate the amount of management you need to do. For example, some organizations have skills and resources to run and manage a Kubernetes implementation, because they invest in strong SRE teams to manage Kubernetes clusters and find value in the associated skill portability. These teams handle frequent cluster upgrades. For example, Kubernetes has three major releases a year, and deprecates old versions.\nOrganization size is a key factor, as smaller organizations might have a more limited IT team made up of people fulfilling multiple roles, while larger enterprises can support hundreds of workloads in production at once.\n- Ease of deployment\n-\nDifferent AWS container services meet unique needs in terms of deployment complexity. Here's how each service is optimized for its own role:\n-\nAWS App Runner offers the most straightforward path for you to deploy your application on the internet without managing or customizing the underlying infrastructure.\n-\nAmazon ECS is a good choice if you need more control over the network and security configurations without sacrificing scale or features.\n-\nAmazon EKS provides flexibility and control over application deployment and orchestration provided by Kubernetes technology.\n-\nChoose\nNow that you know the criteria by which you are evaluating your container options, you are ready to choose which AWS container services might be a good fit for your organizational requirements.\nThe following table highlights which services are optimized for which circumstances. Use the table to help determine which container services and tools are.\n|Containers category\n|When would you use it?\n|Services\n|Capacity\n|Use when you want to run your containers on self-managed or AWS managed compute.\n|\nOrchestration\n|\nUse when you need the capacity to deploy and manage up to thousands of containers.\n|Vertical solutions\n|Use when you or your team don't have a lot of experience with containers or infrastructure.\n|\nTools and services with container support\n|\nUse for supporting your container operations.\n|On-premises\n|Use these services for flexibility in where you run your container-based applications.\nUse\nYou should now have a clear understanding of each AWS container service (and the supporting AWS tools and services) and which one might be the best fit for your organization and use case.\nTo explore how to use and learn more about each of the available AWS container services, we have provided a pathway to explore how each of the services work. The following section provides links to in-depth documentation, hands-on tutorials, and resources to get you started.\nCapacity\n- Amazon EC2\n-\n-\nWhat is Amazon EC2?\nGet an overview of Amazon EC2. This guide not only provides an introduction to the service, but also covers how to get started using it and then provides in-depth descriptions of key features and how to use them.\n-\nAmazon EC2 instance types\nWhen you launch an EC2 instance, the instance type that you specify determines the hardware of the host computer used for your instance. Each instance type offers different compute, memory, and storage capabilities, and is grouped in an instance family based on these capabilities. This guide walks you through EC2 instance types.\n-\nAmazon EC2 Auto Scaling with EC2 Spot Instances\nLearn how to create a stateless, fault-tolerant workload using Amazon EC2 Auto Scaling with launch templates to request Amazon EC2 Spot Instances.\n-\n- AWS Fargate\n-\n-\nGetting started with AWS Fargate\nThis guide explains the basics of AWS Fargate, a technology that you can use with Amazon ECS to run containers without having to manage servers or clusters of Amazon EC2 instances.\n-\nGetting started with the console using Linux containers on AWS Fargate\nGet started with Amazon ECS on AWS Fargate by using the Fargate launch type for your tasks in the Regions where Amazon ECS supports AWS Fargate.\n-\nCreating a cluster with a Fargate Linux task using the AWS CLI\nSet up a cluster, register a task definition, run a Linux task, and perform other common scenarios in Amazon ECS with the AWS CLI.\n-\n- AWS Outposts\n-\n-\nGetting started with AWS Outposts\nAccess the complete set of AWS Outposts technical documentation.\n-\nWhat is AWS Outposts?\nGet an introduction to this fully managed service that extends AWS infrastructure, services, APIs, and tools to customer premises.\n-\nAWS Outposts servers pricing\nGet details on the pricing of AWS Outposts servers.\n-\nOrchestration\n- Amazon ECS\n-\n-\nGetting started with Amazon ECS\nGet an introduction to the tools available to access Amazon ECS and introductory step-by-step procedures to run containers.\n-\nTutorials for Amazon ECS\nLearn how to perform common tasks—including the creation of clusters and VPCs—when using Amazon ECS.\n-\nAmazon ECS Immersion Day\nThis workshop expands on your foundational understanding of containers and provides practical experience scaling, monitoring, and managing container workflows using Amazon ECS and AWS Fargate.\n-\nDeploy containers on Amazon ECS\nLearn how to run a sample application on an Amazon ECS cluster behind a load balancer, test the sample application, and delete your resources to avoid charges.\n-\n- Amazon EKS\n-\n-\nGetting started with Amazon EKS\nLearn more about Amazon EKS, a managed service that you can use to run Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or nodes.\n-\nAmazon EKS deployment\nExplore Amazon EKS deployment options on AWS and learn how to use it to manage a general containerized application.\n-\nAmazon EKS workshop\nExplore practical exercises to learn about Amazon EKS.\n-\n- Red Hat OpenShift Service on AWS\n-\n-\nWhat is Red Hat OpenShift Service on AWS?\nLearn how to use this managed service to build, scale, and deploy containerized applications with the Red Hat OpenShift enterprise Kubernetes platform on AWS.\n-\nGetting started with Red Hat OpenShift Service on AWS\nLearn how to get started using Red Hat OpenShift Service on AWS (ROSA).\n-\nWhy would you use ROSA?\nWatch a video to learn when to use Red Hat OpenShift over standard Kubernetes and explore ROSA in depth.\n-\nVertical solutions\n- AWS App Runner\n-\n-\nWhat is AWS App Runner?\nLearn when to use this service to deploy from source code or a container image directly to a scalable and secure web application in the AWS Cloud.\n-\nGetting started with AWS App Runner\nUse this tutorial to configure the source code and deployment, the service build, and the service runtime to deploy your application to AWS App Runner.\n-\nDeploy a web app using AWS App Runner\nFollow these step-by-step instructions to deploy a containerized web application using AWS App Runner.\n-\n- AWS Lambda\n-\n-\nWhat is AWS Lambda?\nLearn how to use Lambda to run your code on a high-availability compute infrastructure and perform all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, and logging.\n-\nAWS Lambda documentation\nWork with AWS Lambda documentation to understand how you can use this service to run code without provisioning or managing servers and only pay for the compute time that you consume.\n-\nWorking with Lambda container images locally\nLearn how you can use a deployment package to deploy your function code to Lambda. Lambda supports two types of deployment packages: container images and\n.zipfile archives.\n-\n- Amazon Lightsail\n-\n-\nWhat is Amazon Lightsail?\nGet the full story on Amazon Lightsail, including what it does and how you can benefit from it. This guide also includes step-by-step guidance to help you get started using Lightsail and then configure it to meet your needs.\n-\nCreating Lightsail container service images\nLearn how to create a container image on your local machine using a Dockerfile. You can then push it to your Lightsail container service to deploy it.\n-\nAmazon Lightsail resource center\nExplore Lightsail tutorials, videos, and links to core concept documentation.\n-\n- AWS Batch\n-\n-\nWhat is AWS Batch?\nLearn how to use AWS Batch to run batch computing workloads in the AWS Cloud.\n-\nBest practices for AWS Batch\nConsider this guidance on how to run and optimize your workloads when using AWS Batch.\n-\nAWS Batch workshops center\nUse these workshops, organized in a progressive manner from beginner to advanced, to explore and learn AWS Batch.\n-\nTools and services with container support\n- Amazon ECR\n-\n-\nAmazon ECR documentation\nUse the Amazon ECR documentation to explore the best ways to use this fully managed container registry.\n-\nWhat is Amazon Elastic Container Registry (Amazon ECR)?\nA guide to getting started with—and using—Amazon ECR.\n-\nAmazon ECR in Multi-Account and Multi-Region Architectures\nExplore key considerations for Amazon ECR architectures that span across AWS accounts and AWS Regions, and architectures related to hypothetical customer use cases.\n-\nOn-premises\n- Amazon ECS Anywhere\n-\n-\nWhat is Amazon ECS Anywhere?\nLearn how Amazon ECS Anywhere provides support for registering an external instance, such as an on-premises server or virtual machine (VM), to your Amazon ECS cluster.\n-\nAmazon ECS Anywhere pricing\nUse this pricing guide to understand Amazon ECS Anywhere pricing, which is based on a model in which you are charged based on the amount of time the instances you have registered to an Amazon ECS cluster are connected to the ECS control plane, rounded up to the nearest second.\n-\nAmazon ECS Anywhere FAQs\nGet answers to frequently asked questions about Amazon ECS Anywhere.\n-\n- Amazon EKS Anywhere\n-\n-\nAmazon EKS Anywhere documentation\nUse the documentation to understand the use of and best practices for Amazon EKS Anywhere.\n-\nAmazon EKS Anywhere pricing\nUse this pricing guide to understand Amazon EKS Anywhere pricing.\n-\nAmazon EKS Anywhere FAQs\nGet answers to frequently asked questions about Amazon EKS Anywhere.\n-\n- Amazon EKS Hybrid Nodes\n-\n-\nAmazon EKS Hybrid Nodes overview\nUse the documentation to understand the use of and best practices for Amazon EKS Hybrid Nodes.\n-\nAmazon EKS Hybrid Nodes pricing\nUse the pricing guide to understand Amazon EKS Hybrid Nodes pricing.\n-\nA deep dive into Amazon EKS Hybrid Nodes\nExplore how you can use your existing on-premises and edge infrastructure as nodes in Amazon EKS clusters.\n-\nExplore\n-\nFor your role\n-\nFor an introduction\n-\nFor a video\n-\nArchitecture diagrams\nExplore reference architecture diagrams for containers on AWS.\n-\nWhitepapers\nExplore whitepapers to help you get started and learn best practices.\n-\nAWS solutions\nExplore vetted solutions and architectural guidance for common use cases for containers.",
  "title": "Choosing an AWS container service",
  "author": "",
  "date": "2025-05-16"
}